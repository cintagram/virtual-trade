const { db } = require('./db/database');
const { fetchPrice } = require('./utils/fetchPrice');
const { liquidatePosition } = require('./utils/autoLiquidator');

async function monitorPositions(client) {
    const rows = db.prepare(`SELECT userId FROM positions`).all();

    for (const { userId } of rows) {
        const pos = db.prepare(`SELECT * FROM positions WHERE userId = ?`).get(userId);
        if (!pos) continue;

        const currentPrice = await fetchPrice(pos.symbol);
        const entryPrice = pos.entry;
        const leverage = pos.leverage;
        const liquidationPrice =
            pos.type === 'LONG'
                ? entryPrice - (entryPrice / leverage)
                : entryPrice + (entryPrice / leverage);

        if (
            (pos.type === 'LONG' && currentPrice <= liquidationPrice) ||
            (pos.type === 'SHORT' && currentPrice >= liquidationPrice)
        ) {
            await liquidatePosition(client, userId, `‚ö†Ô∏è Í∞ïÏ†úÏ≤≠ÏÇ∞ Ìä∏Î¶¨Í±∞Îê®: Ï≤≠ÏÇ∞Í∞Ä ${liquidationPrice.toFixed(4)} USDT`);
            continue;  // Ïù¥ÎØ∏ Ï≤≠ÏÇ∞ÎêêÏúºÎãà Îã§Ïùå Ìè¨ÏßÄÏÖòÏúºÎ°ú
        }

        // ‚úÖ TP / SL Ï≤¥ÌÅ¨
        if (pos.type === 'LONG') {
            if (pos.tp && currentPrice >= pos.tp) {
                await liquidatePosition(client, userId, `üéØ Î™©ÌëúÍ∞Ä ${pos.tp} ÎèÑÎã¨`);
            } else if (pos.sl && currentPrice <= pos.sl) {
                await liquidatePosition(client, userId, `üõë ÏÜêÏ†àÍ∞Ä ${pos.sl} ÎèÑÎã¨`);
            }
        }

        if (pos.type === 'SHORT') {
            if (pos.tp && currentPrice <= pos.tp) {
                await liquidatePosition(client, userId, `üéØ Î™©ÌëúÍ∞Ä ${pos.tp} ÎèÑÎã¨`);
            } else if (pos.sl && currentPrice >= pos.sl) {
                await liquidatePosition(client, userId, `üõë ÏÜêÏ†àÍ∞Ä ${pos.sl} ÎèÑÎã¨`);
            }
        }
    }

    setTimeout(() => monitorPositions(client), 5000);
}

module.exports = { monitorPositions };
